@startuml
'https://plantuml.com/class-diagram

hide empty methods
hide empty fields

package utils {
    abstract class AbstractConfigurable {
        + __init__ (config: dict[str,any]) -> None
        + {static} section () -> str
        + {static} mod_config (loaded_config: dict[str,any]) -> dict[str,any]
    }

    class GlobalConfiguration {
        # filename: str

        + __init__ (filename: str) -> None
        + for_configurable (configurable: type[AbstractConfigurable]) -> dict[str, any]
        + correct_configuration (list_of_configurables: list[type[AbstractConfigurable]]) -> None
        + save () -> None
    }

    enum EnumPlatform {
        UNKNOWN = 0
        DESKTOP = 1
        RASPBERRY_PI = 2
    }

    class det_platform {
        + {static} get_system_info () -> dict[str,any]
        + {static} classify_host () -> EnumPlatform
    }

    det_platform - EnumPlatform: using values >
}

package sensorDevices {
    abstract class AbstractSensorDevice {
        # _is_dummy: bool

        + @property[r] {abstract} id
        + @property[r] data: any

        + {abstract} measure () -> None
        + __init__ (is_dummy: bool) -> None
    }

    class SensorSDS011 {
        @override id

        @override __init__ ()
        @override measure ()
    }
    AbstractSensorDevice <|-- SensorSDS011
    SensorSDS011 - utils.det_platform: using methods >

    enum SensorSDS011Keys {
        pm2_5 = "pm2_5"
        pm10 = "pm10"
    }
    SensorSDS011 - SensorSDS011Keys: using as constants >

    class SensorSCD41 {
        @override id

        @override __init__ ()
        @override measure ()
    }
    AbstractSensorDevice <|-- SensorSCD41
    SensorSCD41 - utils.det_platform: using methods >

    enum SensorSCD41Keys {
        temperature = "temperature"
        co2 = "co2"
        humidity = "humidity"
    }
    SensorSCD41 - SensorSCD41Keys: using as constants >
}

package mqttTasks {
    abstract class AbstractMQTTTask {
        + @property[rw] manager: MQTTManager
        + @property[r] {abstract} topic: str

        + {abstract} process_mqtt_task (data: dict) -> None
    }

    class SensorManager {
        # _sensors: list[AbstractSensorDevice]
        + @property[r] data: dict[str,any]

        + @override topic

        + __init__ (sensors: list[AbstractSensorDevice])
        + perform_measuring ()

        + @override process_mqtt_task ()
    }
    AbstractMQTTTask <|-- SensorManager
}
mqttTasks.SensorManager "1" *-- "many" sensorDevices.AbstractSensorDevice : has >

package mqtt {
    class MQTTManager {
        # _task_dictionary: dict[str,AbstractMQTTTask]

        + __init__ (config: dict[str,any], tasks: list[AbstractMQTTTask]) -> None
        # _set_methods_for_internal_client () -> None

        + connect () -> None
        + disconnect () -> None
        + submit (topic: str, data: dict) -> None

        @override section ()
        @override mod_config ()
    }
    utils.AbstractConfigurable <|-- MQTTManager

    enum _MQTTConfigKeys {
        USER_NAME       = "username"
        USER_PASSWORD   = "password"
        CERT_ROOTCA     = "path_RootCA"
        CERT_DEVCERT    = "path_Certificate"
        CERT_PRIVKEY    = "path_PrivateKey"
        USE_TLS         = "use_tls"
        SERVER_HOST     = "host"
        SERVER_PORT     = "port"
        CLIENT_ID       = "id"
    }
    MQTTManager - _MQTTConfigKeys: using as constants >
}
mqtt.MQTTManager "1" *-- "many" mqttTasks.AbstractMQTTTask : has >

package main {

}
note left of main: Program entry; Uses all concrete implementations for loading objects.
main --> "1" utils.GlobalConfiguration
main --> "1" mqtt.MQTTManager

package test {
    class MyTestCase {
        + test_sensor_scd41()
        + test_sensor_sds11()
        + test_enum_validity()
    }
    note left of MyTestCase: in Module "test_sensors". Purpose: testing sensor functionalities.
}
note top of test: Environment for testing

@enduml